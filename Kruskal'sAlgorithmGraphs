import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;

public class MinSpanningTree {
    static class Edge {
        int source;
        int destination;
        int weight;

        public Edge(int weight,int source, int destination) {
            this.weight=weight;
            this.source = source;
            this.destination = destination;
        }
    }

    static class Graph {
        int vertex;
        LinkedList<Edge>[] adjList;
        ArrayList<Edge> allEdges = new ArrayList<>();

        public Graph(int vertex) {
            this.vertex = vertex;
            adjList = new LinkedList[vertex];
            for (int i = 0; i < vertex; i++) {
                adjList[i] = new LinkedList<>();
            }
        }


        public void addEdge(int weight,int source, int destination) {
            Edge edge=new Edge(weight,source,destination);
            allEdges.add(edge);
            adjList[source].addFirst(edge);
            //adjList[destination].addFirst(edge);  //if undirected graph
        }

        public void makeSet(int[] parent)
        {
            for(int i=0;i<vertex;i++)
            {
                parent[i]=i;
            }
        }

        public int find(int[] parent,int vertex)
        {
            if(parent[vertex]!=vertex)
                return find(parent,parent[vertex]);
            return vertex;
        }

        public void union(int[] parent,int x,int y)
        {
            int x_parent=find(parent,x);
            int y_parent=find(parent,y);
            parent[y_parent]=x_parent;
        }

        public ArrayList<Edge> KrushalGraph()
        {
            PriorityQueue<Edge> pq=new PriorityQueue<>(allEdges.size(), Comparator.comparingInt(o->o.weight));
            for(int i=0;i<allEdges.size();i++)
            {
                pq.add(allEdges.get(i));
            }
            int[] parent=new int[vertex];
            makeSet(parent);
            ArrayList<Edge> mst = new ArrayList<>();

            //process vertices - 1 edges
            int index = 0;
            while(index<vertex-1){
                Edge edge = pq.remove();
                //check if adding this edge creates a cycle
                int x_set = find(parent, edge.source);
                int y_set = find(parent, edge.destination);

                if(x_set==y_set){
                    //ignore, will create cycle
                }else {
                    //add it to our final result
                    mst.add(edge);
                    index++;
                    union(parent,x_set,y_set);
                }
            }
           return mst;
        }
    }
    public static void main(String[] args) {
        int vertices = 6;
        Graph graph = new Graph(vertices);
        graph.addEdge(4,0,1);
        graph.addEdge(3,0,2);
        graph.addEdge(1,1,2);
        graph.addEdge(2,1,3);
        graph.addEdge(4,2,3);
        graph.addEdge(2,3,4);
        graph.addEdge(6,4,5);


         ArrayList<Edge> result=graph.KrushalGraph();
         for(int i=0;i<result.size();i++)
         {
             System.out.println("source "+result.get(i).source+" destination "+result.get(i).destination+" weight "+result.get(i).weight);   
         }
    }
}

