import java.util.ArrayList;
import java.util.LinkedList;

public class DisjointSetbyRank {

        static class Edge {
            int source;
            int destination;

            public Edge(int source, int destination) {
                this.source = source;
                this.destination = destination;
            }
        }

        static class Graph {
            int vertex;
            LinkedList<Edge>[] adjList;
            ArrayList<Edge> allEdges = new ArrayList<>();

            public Graph(int vertex) {
                this.vertex = vertex;
                adjList = new LinkedList[vertex];
                for (int i = 0; i < vertex; i++) {
                    adjList[i] = new LinkedList<>();
                }
            }


            public void addEdge(int source, int destination) {
                Edge edge=new Edge(source,destination);
                allEdges.add(edge);
                adjList[source].addFirst(edge);
                //adjList[destination].addFirst(edge);  //if undirected graph
            }

            public void makeSet(int[] parent,int[]rank)
            {
                for(int i=0;i<vertex;i++)
                {
                    parent[i]=i;
                    rank[i]=i;
                }
            }

            public int find(int[] parent,int vertex)
            {
                if(parent[vertex]!=vertex)
                    return find(parent,parent[vertex]);
                return vertex;
            }

            public void union(int[] parent,int x,int y)
            {
                int x_parent=find(parent,x);
                int y_parent=find(parent,y);
                parent[y_parent]=x_parent;
            }

            public void disjointSet()
            {
                int[] parent=new int[vertex];
                int[] rank=new int[vertex];
                makeSet(parent,rank);

                for(int i=0;i<allEdges.size();i++)
                {
                    Edge edge=allEdges.get(i);
                    int x_set=find(parent,edge.source);
                    int y_set=find(parent,edge.destination);

                    if(x_set==y_set){}
                    else
                    {
                        if(rank[y_set]>rank[x_set])
                        {
                            union(parent,y_set,x_set);
                        }
                        union(parent,x_set,y_set);
                    }

                }
            }
        }
        public static void main(String[] args) {
            int vertices = 5;
            Graph graph = new Graph(vertices);
            graph.addEdge(0,1);
            graph.addEdge(0,2);
            graph.addEdge(1,3);
            graph.addEdge(4,3);

            graph.disjointSet();
        }
    }


